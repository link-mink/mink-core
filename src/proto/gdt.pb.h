// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gdt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gdt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gdt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gdt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gdt_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_gdt_2eproto_metadata_getter(int index);
namespace gdt_grpc {
class Body;
struct BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class Body_Param;
struct Body_ParamDefaultTypeInternal;
extern Body_ParamDefaultTypeInternal _Body_Param_default_instance_;
class CommonReply;
struct CommonReplyDefaultTypeInternal;
extern CommonReplyDefaultTypeInternal _CommonReply_default_instance_;
class CommonRequest;
struct CommonRequestDefaultTypeInternal;
extern CommonRequestDefaultTypeInternal _CommonRequest_default_instance_;
class EndPointDescriptor;
struct EndPointDescriptorDefaultTypeInternal;
extern EndPointDescriptorDefaultTypeInternal _EndPointDescriptor_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace gdt_grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::gdt_grpc::Body* Arena::CreateMaybeMessage<::gdt_grpc::Body>(Arena*);
template<> ::gdt_grpc::Body_Param* Arena::CreateMaybeMessage<::gdt_grpc::Body_Param>(Arena*);
template<> ::gdt_grpc::CommonReply* Arena::CreateMaybeMessage<::gdt_grpc::CommonReply>(Arena*);
template<> ::gdt_grpc::CommonRequest* Arena::CreateMaybeMessage<::gdt_grpc::CommonRequest>(Arena*);
template<> ::gdt_grpc::EndPointDescriptor* Arena::CreateMaybeMessage<::gdt_grpc::EndPointDescriptor>(Arena*);
template<> ::gdt_grpc::Header* Arena::CreateMaybeMessage<::gdt_grpc::Header>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gdt_grpc {

enum Body_ServiceId : int {
  Body_ServiceId_UNKNOWN_SERVICE_ID = 0,
  Body_ServiceId_SYSAGENT = 47,
  Body_ServiceId_Body_ServiceId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Body_ServiceId_Body_ServiceId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Body_ServiceId_IsValid(int value);
constexpr Body_ServiceId Body_ServiceId_ServiceId_MIN = Body_ServiceId_UNKNOWN_SERVICE_ID;
constexpr Body_ServiceId Body_ServiceId_ServiceId_MAX = Body_ServiceId_SYSAGENT;
constexpr int Body_ServiceId_ServiceId_ARRAYSIZE = Body_ServiceId_ServiceId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Body_ServiceId_descriptor();
template<typename T>
inline const std::string& Body_ServiceId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Body_ServiceId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Body_ServiceId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Body_ServiceId_descriptor(), enum_t_value);
}
inline bool Body_ServiceId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Body_ServiceId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Body_ServiceId>(
    Body_ServiceId_descriptor(), name, value);
}
enum SysagentCommand : int {
  UNKNWON_COMMAND = 0,
  CMD_GET_SYSINFO = 1,
  CMD_GET_CPUSTATS = 2,
  CMD_GET_MEMINFO = 3,
  CMD_GET_UNAME = 4,
  CMD_GET_PROCESS_LST = 5,
  CMD_GET_FILE_STAT = 6,
  CMD_UBUS_CALL = 7,
  CMD_SHELL_EXEC = 8,
  CMD_SET_DATA = 9,
  CMD_RUN_RULES = 10,
  CMD_LOAD_RULES = 11,
  CMD_AUTH = 12,
  CMD_SOCKET_PROXY = 13,
  CMD_FIRMWARE_UPDATE = 14,
  SysagentCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SysagentCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SysagentCommand_IsValid(int value);
constexpr SysagentCommand SysagentCommand_MIN = UNKNWON_COMMAND;
constexpr SysagentCommand SysagentCommand_MAX = CMD_FIRMWARE_UPDATE;
constexpr int SysagentCommand_ARRAYSIZE = SysagentCommand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SysagentCommand_descriptor();
template<typename T>
inline const std::string& SysagentCommand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SysagentCommand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SysagentCommand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SysagentCommand_descriptor(), enum_t_value);
}
inline bool SysagentCommand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SysagentCommand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SysagentCommand>(
    SysagentCommand_descriptor(), name, value);
}
enum ParameterType : int {
  UNKNWON_PARAMETER = 0,
  PT_MINK_DTYPE = 6000,
  PT_MINK_DID = 6001,
  PT_CPU_USER_PERCENT = 9000,
  PT_CPU_NICE_PERCENT = 9001,
  PT_CPU_SYSTEM_PERCENT = 9002,
  PT_SI_LOAD_AVG_1_MIN = 9003,
  PT_SI_LOAD_AVG_5_MIN = 9004,
  PT_SI_LOAD_AVG_15_MIN = 9005,
  PT_SI_MEM_TOTAL = 9006,
  PT_SI_MEM_FREE = 9007,
  PT_SI_MEM_BUFFERS = 9008,
  PT_SI_MEM_SWAP_TOTAL = 9009,
  PT_SI_MEM_SWAP_FREE = 9010,
  PT_SI_MEM_HIGH_TOTAL = 9011,
  PT_SI_MEM_HIGH_FREE = 9012,
  PT_SI_MEM_UNIT_SIZE = 9013,
  PT_MI_TOTAL = 9014,
  PT_MI_FREE = 9015,
  PT_MI_BUFFERS = 9016,
  PT_MI_CACHED = 9017,
  PT_UNM_SYSNAME = 9018,
  PT_UNM_NODENAME = 9019,
  PT_UNM_RELEASE = 9020,
  PT_UNM_VERSION = 9021,
  PT_UNM_MACHINE = 9022,
  PT_PL_CMD = 9023,
  PT_PL_TID = 9024,
  PT_PL_PPID = 9025,
  PT_PL_RESIDENT = 9026,
  PT_PL_UTIME = 9027,
  PT_PL_STIME = 9028,
  PT_OWRT_UBUS_PATH = 9029,
  PT_OWRT_UBUS_METHOD = 9030,
  PT_OWRT_UBUS_ARG = 9031,
  PT_OWRT_UBUS_RESULT = 9032,
  PT_SHELL_CMD = 9033,
  PT_SHELL_STDOUT = 9034,
  PT_SHELL_STDERR = 9035,
  PT_SHELL_EXIT_CODE = 9036,
  PT_SP_TYPE = 9037,
  PT_SP_PATH = 9038,
  PT_SP_PAYLOAD = 9039,
  PT_FU_DATA = 9040,
  PT_FU_FSIZE = 9041,
  ParameterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParameterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParameterType_IsValid(int value);
constexpr ParameterType ParameterType_MIN = UNKNWON_PARAMETER;
constexpr ParameterType ParameterType_MAX = PT_FU_FSIZE;
constexpr int ParameterType_ARRAYSIZE = ParameterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParameterType_descriptor();
template<typename T>
inline const std::string& ParameterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParameterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParameterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParameterType_descriptor(), enum_t_value);
}
inline bool ParameterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParameterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParameterType>(
    ParameterType_descriptor(), name, value);
}
// ===================================================================

class CommonRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gdt_grpc.CommonRequest) */ {
 public:
  inline CommonRequest() : CommonRequest(nullptr) {}
  virtual ~CommonRequest();
  explicit constexpr CommonRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonRequest(const CommonRequest& from);
  CommonRequest(CommonRequest&& from) noexcept
    : CommonRequest() {
    *this = ::std::move(from);
  }

  inline CommonRequest& operator=(const CommonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonRequest& operator=(CommonRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonRequest* internal_default_instance() {
    return reinterpret_cast<const CommonRequest*>(
               &_CommonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonRequest& a, CommonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonRequest* New() const final {
    return CreateMaybeMessage<CommonRequest>(nullptr);
  }

  CommonRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonRequest& from);
  void MergeFrom(const CommonRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gdt_grpc.CommonRequest";
  }
  protected:
  explicit CommonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_gdt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .gdt_grpc.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::gdt_grpc::Header& header() const;
  ::gdt_grpc::Header* release_header();
  ::gdt_grpc::Header* mutable_header();
  void set_allocated_header(::gdt_grpc::Header* header);
  private:
  const ::gdt_grpc::Header& _internal_header() const;
  ::gdt_grpc::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::gdt_grpc::Header* header);
  ::gdt_grpc::Header* unsafe_arena_release_header();

  // .gdt_grpc.Body body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::gdt_grpc::Body& body() const;
  ::gdt_grpc::Body* release_body();
  ::gdt_grpc::Body* mutable_body();
  void set_allocated_body(::gdt_grpc::Body* body);
  private:
  const ::gdt_grpc::Body& _internal_body() const;
  ::gdt_grpc::Body* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::gdt_grpc::Body* body);
  ::gdt_grpc::Body* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:gdt_grpc.CommonRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gdt_grpc::Header* header_;
  ::gdt_grpc::Body* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdt_2eproto;
};
// -------------------------------------------------------------------

class CommonReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gdt_grpc.CommonReply) */ {
 public:
  inline CommonReply() : CommonReply(nullptr) {}
  virtual ~CommonReply();
  explicit constexpr CommonReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonReply(const CommonReply& from);
  CommonReply(CommonReply&& from) noexcept
    : CommonReply() {
    *this = ::std::move(from);
  }

  inline CommonReply& operator=(const CommonReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonReply& operator=(CommonReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonReply* internal_default_instance() {
    return reinterpret_cast<const CommonReply*>(
               &_CommonReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonReply& a, CommonReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonReply* New() const final {
    return CreateMaybeMessage<CommonReply>(nullptr);
  }

  CommonReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonReply& from);
  void MergeFrom(const CommonReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gdt_grpc.CommonReply";
  }
  protected:
  explicit CommonReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_gdt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .gdt_grpc.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::gdt_grpc::Header& header() const;
  ::gdt_grpc::Header* release_header();
  ::gdt_grpc::Header* mutable_header();
  void set_allocated_header(::gdt_grpc::Header* header);
  private:
  const ::gdt_grpc::Header& _internal_header() const;
  ::gdt_grpc::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::gdt_grpc::Header* header);
  ::gdt_grpc::Header* unsafe_arena_release_header();

  // .gdt_grpc.Body body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::gdt_grpc::Body& body() const;
  ::gdt_grpc::Body* release_body();
  ::gdt_grpc::Body* mutable_body();
  void set_allocated_body(::gdt_grpc::Body* body);
  private:
  const ::gdt_grpc::Body& _internal_body() const;
  ::gdt_grpc::Body* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::gdt_grpc::Body* body);
  ::gdt_grpc::Body* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:gdt_grpc.CommonReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gdt_grpc::Header* header_;
  ::gdt_grpc::Body* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdt_2eproto;
};
// -------------------------------------------------------------------

class EndPointDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gdt_grpc.EndPointDescriptor) */ {
 public:
  inline EndPointDescriptor() : EndPointDescriptor(nullptr) {}
  virtual ~EndPointDescriptor();
  explicit constexpr EndPointDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndPointDescriptor(const EndPointDescriptor& from);
  EndPointDescriptor(EndPointDescriptor&& from) noexcept
    : EndPointDescriptor() {
    *this = ::std::move(from);
  }

  inline EndPointDescriptor& operator=(const EndPointDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndPointDescriptor& operator=(EndPointDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndPointDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndPointDescriptor* internal_default_instance() {
    return reinterpret_cast<const EndPointDescriptor*>(
               &_EndPointDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EndPointDescriptor& a, EndPointDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(EndPointDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndPointDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndPointDescriptor* New() const final {
    return CreateMaybeMessage<EndPointDescriptor>(nullptr);
  }

  EndPointDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndPointDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndPointDescriptor& from);
  void MergeFrom(const EndPointDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndPointDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gdt_grpc.EndPointDescriptor";
  }
  protected:
  explicit EndPointDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_gdt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:gdt_grpc.EndPointDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdt_2eproto;
};
// -------------------------------------------------------------------

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gdt_grpc.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  virtual ~Header();
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gdt_grpc.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_gdt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kDestinationFieldNumber = 2,
  };
  // .gdt_grpc.EndPointDescriptor source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::gdt_grpc::EndPointDescriptor& source() const;
  ::gdt_grpc::EndPointDescriptor* release_source();
  ::gdt_grpc::EndPointDescriptor* mutable_source();
  void set_allocated_source(::gdt_grpc::EndPointDescriptor* source);
  private:
  const ::gdt_grpc::EndPointDescriptor& _internal_source() const;
  ::gdt_grpc::EndPointDescriptor* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::gdt_grpc::EndPointDescriptor* source);
  ::gdt_grpc::EndPointDescriptor* unsafe_arena_release_source();

  // .gdt_grpc.EndPointDescriptor destination = 2;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::gdt_grpc::EndPointDescriptor& destination() const;
  ::gdt_grpc::EndPointDescriptor* release_destination();
  ::gdt_grpc::EndPointDescriptor* mutable_destination();
  void set_allocated_destination(::gdt_grpc::EndPointDescriptor* destination);
  private:
  const ::gdt_grpc::EndPointDescriptor& _internal_destination() const;
  ::gdt_grpc::EndPointDescriptor* _internal_mutable_destination();
  public:
  void unsafe_arena_set_allocated_destination(
      ::gdt_grpc::EndPointDescriptor* destination);
  ::gdt_grpc::EndPointDescriptor* unsafe_arena_release_destination();

  // @@protoc_insertion_point(class_scope:gdt_grpc.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gdt_grpc::EndPointDescriptor* source_;
  ::gdt_grpc::EndPointDescriptor* destination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdt_2eproto;
};
// -------------------------------------------------------------------

class Body_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gdt_grpc.Body.Param) */ {
 public:
  inline Body_Param() : Body_Param(nullptr) {}
  virtual ~Body_Param();
  explicit constexpr Body_Param(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Body_Param(const Body_Param& from);
  Body_Param(Body_Param&& from) noexcept
    : Body_Param() {
    *this = ::std::move(from);
  }

  inline Body_Param& operator=(const Body_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline Body_Param& operator=(Body_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Body_Param& default_instance() {
    return *internal_default_instance();
  }
  static inline const Body_Param* internal_default_instance() {
    return reinterpret_cast<const Body_Param*>(
               &_Body_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Body_Param& a, Body_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(Body_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Body_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Body_Param* New() const final {
    return CreateMaybeMessage<Body_Param>(nullptr);
  }

  Body_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Body_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Body_Param& from);
  void MergeFrom(const Body_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Body_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gdt_grpc.Body.Param";
  }
  protected:
  explicit Body_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_gdt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gdt_grpc.Body.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdt_2eproto;
};
// -------------------------------------------------------------------

class Body PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gdt_grpc.Body) */ {
 public:
  inline Body() : Body(nullptr) {}
  virtual ~Body();
  explicit constexpr Body(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Body(const Body& from);
  Body(Body&& from) noexcept
    : Body() {
    *this = ::std::move(from);
  }

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline Body& operator=(Body&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Body& default_instance() {
    return *internal_default_instance();
  }
  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Body& a, Body& b) {
    a.Swap(&b);
  }
  inline void Swap(Body* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Body* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Body* New() const final {
    return CreateMaybeMessage<Body>(nullptr);
  }

  Body* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Body>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Body* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gdt_grpc.Body";
  }
  protected:
  explicit Body(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_gdt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Body_Param Param;

  typedef Body_ServiceId ServiceId;
  static constexpr ServiceId UNKNOWN_SERVICE_ID =
    Body_ServiceId_UNKNOWN_SERVICE_ID;
  static constexpr ServiceId SYSAGENT =
    Body_ServiceId_SYSAGENT;
  static inline bool ServiceId_IsValid(int value) {
    return Body_ServiceId_IsValid(value);
  }
  static constexpr ServiceId ServiceId_MIN =
    Body_ServiceId_ServiceId_MIN;
  static constexpr ServiceId ServiceId_MAX =
    Body_ServiceId_ServiceId_MAX;
  static constexpr int ServiceId_ARRAYSIZE =
    Body_ServiceId_ServiceId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ServiceId_descriptor() {
    return Body_ServiceId_descriptor();
  }
  template<typename T>
  static inline const std::string& ServiceId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServiceId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServiceId_Name.");
    return Body_ServiceId_Name(enum_t_value);
  }
  static inline bool ServiceId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ServiceId* value) {
    return Body_ServiceId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kServiceIdFieldNumber = 1,
  };
  // repeated .gdt_grpc.Body.Param params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::gdt_grpc::Body_Param* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gdt_grpc::Body_Param >*
      mutable_params();
  private:
  const ::gdt_grpc::Body_Param& _internal_params(int index) const;
  ::gdt_grpc::Body_Param* _internal_add_params();
  public:
  const ::gdt_grpc::Body_Param& params(int index) const;
  ::gdt_grpc::Body_Param* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gdt_grpc::Body_Param >&
      params() const;

  // .gdt_grpc.Body.ServiceId service_id = 1;
  void clear_service_id();
  ::gdt_grpc::Body_ServiceId service_id() const;
  void set_service_id(::gdt_grpc::Body_ServiceId value);
  private:
  ::gdt_grpc::Body_ServiceId _internal_service_id() const;
  void _internal_set_service_id(::gdt_grpc::Body_ServiceId value);
  public:

  // @@protoc_insertion_point(class_scope:gdt_grpc.Body)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gdt_grpc::Body_Param > params_;
  int service_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonRequest

// .gdt_grpc.Header header = 1;
inline bool CommonRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CommonRequest::has_header() const {
  return _internal_has_header();
}
inline void CommonRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::gdt_grpc::Header& CommonRequest::_internal_header() const {
  const ::gdt_grpc::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::gdt_grpc::Header&>(
      ::gdt_grpc::_Header_default_instance_);
}
inline const ::gdt_grpc::Header& CommonRequest::header() const {
  // @@protoc_insertion_point(field_get:gdt_grpc.CommonRequest.header)
  return _internal_header();
}
inline void CommonRequest::unsafe_arena_set_allocated_header(
    ::gdt_grpc::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gdt_grpc.CommonRequest.header)
}
inline ::gdt_grpc::Header* CommonRequest::release_header() {
  
  ::gdt_grpc::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gdt_grpc::Header* CommonRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:gdt_grpc.CommonRequest.header)
  
  ::gdt_grpc::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::gdt_grpc::Header* CommonRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::gdt_grpc::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::gdt_grpc::Header* CommonRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:gdt_grpc.CommonRequest.header)
  return _internal_mutable_header();
}
inline void CommonRequest::set_allocated_header(::gdt_grpc::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gdt_grpc.CommonRequest.header)
}

// .gdt_grpc.Body body = 2;
inline bool CommonRequest::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool CommonRequest::has_body() const {
  return _internal_has_body();
}
inline void CommonRequest::clear_body() {
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
inline const ::gdt_grpc::Body& CommonRequest::_internal_body() const {
  const ::gdt_grpc::Body* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const ::gdt_grpc::Body&>(
      ::gdt_grpc::_Body_default_instance_);
}
inline const ::gdt_grpc::Body& CommonRequest::body() const {
  // @@protoc_insertion_point(field_get:gdt_grpc.CommonRequest.body)
  return _internal_body();
}
inline void CommonRequest::unsafe_arena_set_allocated_body(
    ::gdt_grpc::Body* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gdt_grpc.CommonRequest.body)
}
inline ::gdt_grpc::Body* CommonRequest::release_body() {
  
  ::gdt_grpc::Body* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gdt_grpc::Body* CommonRequest::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:gdt_grpc.CommonRequest.body)
  
  ::gdt_grpc::Body* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::gdt_grpc::Body* CommonRequest::_internal_mutable_body() {
  
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::gdt_grpc::Body>(GetArena());
    body_ = p;
  }
  return body_;
}
inline ::gdt_grpc::Body* CommonRequest::mutable_body() {
  // @@protoc_insertion_point(field_mutable:gdt_grpc.CommonRequest.body)
  return _internal_mutable_body();
}
inline void CommonRequest::set_allocated_body(::gdt_grpc::Body* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:gdt_grpc.CommonRequest.body)
}

// -------------------------------------------------------------------

// CommonReply

// .gdt_grpc.Header header = 1;
inline bool CommonReply::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CommonReply::has_header() const {
  return _internal_has_header();
}
inline void CommonReply::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::gdt_grpc::Header& CommonReply::_internal_header() const {
  const ::gdt_grpc::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::gdt_grpc::Header&>(
      ::gdt_grpc::_Header_default_instance_);
}
inline const ::gdt_grpc::Header& CommonReply::header() const {
  // @@protoc_insertion_point(field_get:gdt_grpc.CommonReply.header)
  return _internal_header();
}
inline void CommonReply::unsafe_arena_set_allocated_header(
    ::gdt_grpc::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gdt_grpc.CommonReply.header)
}
inline ::gdt_grpc::Header* CommonReply::release_header() {
  
  ::gdt_grpc::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gdt_grpc::Header* CommonReply::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:gdt_grpc.CommonReply.header)
  
  ::gdt_grpc::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::gdt_grpc::Header* CommonReply::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::gdt_grpc::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::gdt_grpc::Header* CommonReply::mutable_header() {
  // @@protoc_insertion_point(field_mutable:gdt_grpc.CommonReply.header)
  return _internal_mutable_header();
}
inline void CommonReply::set_allocated_header(::gdt_grpc::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gdt_grpc.CommonReply.header)
}

// .gdt_grpc.Body body = 2;
inline bool CommonReply::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool CommonReply::has_body() const {
  return _internal_has_body();
}
inline void CommonReply::clear_body() {
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
inline const ::gdt_grpc::Body& CommonReply::_internal_body() const {
  const ::gdt_grpc::Body* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const ::gdt_grpc::Body&>(
      ::gdt_grpc::_Body_default_instance_);
}
inline const ::gdt_grpc::Body& CommonReply::body() const {
  // @@protoc_insertion_point(field_get:gdt_grpc.CommonReply.body)
  return _internal_body();
}
inline void CommonReply::unsafe_arena_set_allocated_body(
    ::gdt_grpc::Body* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gdt_grpc.CommonReply.body)
}
inline ::gdt_grpc::Body* CommonReply::release_body() {
  
  ::gdt_grpc::Body* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gdt_grpc::Body* CommonReply::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:gdt_grpc.CommonReply.body)
  
  ::gdt_grpc::Body* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::gdt_grpc::Body* CommonReply::_internal_mutable_body() {
  
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::gdt_grpc::Body>(GetArena());
    body_ = p;
  }
  return body_;
}
inline ::gdt_grpc::Body* CommonReply::mutable_body() {
  // @@protoc_insertion_point(field_mutable:gdt_grpc.CommonReply.body)
  return _internal_mutable_body();
}
inline void CommonReply::set_allocated_body(::gdt_grpc::Body* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:gdt_grpc.CommonReply.body)
}

// -------------------------------------------------------------------

// EndPointDescriptor

// string type = 1;
inline void EndPointDescriptor::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& EndPointDescriptor::type() const {
  // @@protoc_insertion_point(field_get:gdt_grpc.EndPointDescriptor.type)
  return _internal_type();
}
inline void EndPointDescriptor::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gdt_grpc.EndPointDescriptor.type)
}
inline std::string* EndPointDescriptor::mutable_type() {
  // @@protoc_insertion_point(field_mutable:gdt_grpc.EndPointDescriptor.type)
  return _internal_mutable_type();
}
inline const std::string& EndPointDescriptor::_internal_type() const {
  return type_.Get();
}
inline void EndPointDescriptor::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EndPointDescriptor::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gdt_grpc.EndPointDescriptor.type)
}
inline void EndPointDescriptor::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:gdt_grpc.EndPointDescriptor.type)
}
inline void EndPointDescriptor::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gdt_grpc.EndPointDescriptor.type)
}
inline std::string* EndPointDescriptor::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EndPointDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:gdt_grpc.EndPointDescriptor.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndPointDescriptor::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gdt_grpc.EndPointDescriptor.type)
}

// string id = 2;
inline void EndPointDescriptor::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& EndPointDescriptor::id() const {
  // @@protoc_insertion_point(field_get:gdt_grpc.EndPointDescriptor.id)
  return _internal_id();
}
inline void EndPointDescriptor::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gdt_grpc.EndPointDescriptor.id)
}
inline std::string* EndPointDescriptor::mutable_id() {
  // @@protoc_insertion_point(field_mutable:gdt_grpc.EndPointDescriptor.id)
  return _internal_mutable_id();
}
inline const std::string& EndPointDescriptor::_internal_id() const {
  return id_.Get();
}
inline void EndPointDescriptor::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EndPointDescriptor::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gdt_grpc.EndPointDescriptor.id)
}
inline void EndPointDescriptor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:gdt_grpc.EndPointDescriptor.id)
}
inline void EndPointDescriptor::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gdt_grpc.EndPointDescriptor.id)
}
inline std::string* EndPointDescriptor::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EndPointDescriptor::release_id() {
  // @@protoc_insertion_point(field_release:gdt_grpc.EndPointDescriptor.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndPointDescriptor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gdt_grpc.EndPointDescriptor.id)
}

// -------------------------------------------------------------------

// Header

// .gdt_grpc.EndPointDescriptor source = 1;
inline bool Header::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool Header::has_source() const {
  return _internal_has_source();
}
inline void Header::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::gdt_grpc::EndPointDescriptor& Header::_internal_source() const {
  const ::gdt_grpc::EndPointDescriptor* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::gdt_grpc::EndPointDescriptor&>(
      ::gdt_grpc::_EndPointDescriptor_default_instance_);
}
inline const ::gdt_grpc::EndPointDescriptor& Header::source() const {
  // @@protoc_insertion_point(field_get:gdt_grpc.Header.source)
  return _internal_source();
}
inline void Header::unsafe_arena_set_allocated_source(
    ::gdt_grpc::EndPointDescriptor* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gdt_grpc.Header.source)
}
inline ::gdt_grpc::EndPointDescriptor* Header::release_source() {
  
  ::gdt_grpc::EndPointDescriptor* temp = source_;
  source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gdt_grpc::EndPointDescriptor* Header::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:gdt_grpc.Header.source)
  
  ::gdt_grpc::EndPointDescriptor* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::gdt_grpc::EndPointDescriptor* Header::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::gdt_grpc::EndPointDescriptor>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::gdt_grpc::EndPointDescriptor* Header::mutable_source() {
  // @@protoc_insertion_point(field_mutable:gdt_grpc.Header.source)
  return _internal_mutable_source();
}
inline void Header::set_allocated_source(::gdt_grpc::EndPointDescriptor* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:gdt_grpc.Header.source)
}

// .gdt_grpc.EndPointDescriptor destination = 2;
inline bool Header::_internal_has_destination() const {
  return this != internal_default_instance() && destination_ != nullptr;
}
inline bool Header::has_destination() const {
  return _internal_has_destination();
}
inline void Header::clear_destination() {
  if (GetArena() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
inline const ::gdt_grpc::EndPointDescriptor& Header::_internal_destination() const {
  const ::gdt_grpc::EndPointDescriptor* p = destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::gdt_grpc::EndPointDescriptor&>(
      ::gdt_grpc::_EndPointDescriptor_default_instance_);
}
inline const ::gdt_grpc::EndPointDescriptor& Header::destination() const {
  // @@protoc_insertion_point(field_get:gdt_grpc.Header.destination)
  return _internal_destination();
}
inline void Header::unsafe_arena_set_allocated_destination(
    ::gdt_grpc::EndPointDescriptor* destination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_);
  }
  destination_ = destination;
  if (destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gdt_grpc.Header.destination)
}
inline ::gdt_grpc::EndPointDescriptor* Header::release_destination() {
  
  ::gdt_grpc::EndPointDescriptor* temp = destination_;
  destination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gdt_grpc::EndPointDescriptor* Header::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_release:gdt_grpc.Header.destination)
  
  ::gdt_grpc::EndPointDescriptor* temp = destination_;
  destination_ = nullptr;
  return temp;
}
inline ::gdt_grpc::EndPointDescriptor* Header::_internal_mutable_destination() {
  
  if (destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::gdt_grpc::EndPointDescriptor>(GetArena());
    destination_ = p;
  }
  return destination_;
}
inline ::gdt_grpc::EndPointDescriptor* Header::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:gdt_grpc.Header.destination)
  return _internal_mutable_destination();
}
inline void Header::set_allocated_destination(::gdt_grpc::EndPointDescriptor* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete destination_;
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(destination);
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:gdt_grpc.Header.destination)
}

// -------------------------------------------------------------------

// Body_Param

// int32 id = 1;
inline void Body_Param::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Body_Param::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Body_Param::id() const {
  // @@protoc_insertion_point(field_get:gdt_grpc.Body.Param.id)
  return _internal_id();
}
inline void Body_Param::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Body_Param::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gdt_grpc.Body.Param.id)
}

// int32 index = 2;
inline void Body_Param::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Body_Param::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Body_Param::index() const {
  // @@protoc_insertion_point(field_get:gdt_grpc.Body.Param.index)
  return _internal_index();
}
inline void Body_Param::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void Body_Param::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:gdt_grpc.Body.Param.index)
}

// string value = 3;
inline void Body_Param::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Body_Param::value() const {
  // @@protoc_insertion_point(field_get:gdt_grpc.Body.Param.value)
  return _internal_value();
}
inline void Body_Param::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:gdt_grpc.Body.Param.value)
}
inline std::string* Body_Param::mutable_value() {
  // @@protoc_insertion_point(field_mutable:gdt_grpc.Body.Param.value)
  return _internal_mutable_value();
}
inline const std::string& Body_Param::_internal_value() const {
  return value_.Get();
}
inline void Body_Param::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Body_Param::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gdt_grpc.Body.Param.value)
}
inline void Body_Param::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:gdt_grpc.Body.Param.value)
}
inline void Body_Param::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gdt_grpc.Body.Param.value)
}
inline std::string* Body_Param::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Body_Param::release_value() {
  // @@protoc_insertion_point(field_release:gdt_grpc.Body.Param.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Body_Param::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gdt_grpc.Body.Param.value)
}

// -------------------------------------------------------------------

// Body

// .gdt_grpc.Body.ServiceId service_id = 1;
inline void Body::clear_service_id() {
  service_id_ = 0;
}
inline ::gdt_grpc::Body_ServiceId Body::_internal_service_id() const {
  return static_cast< ::gdt_grpc::Body_ServiceId >(service_id_);
}
inline ::gdt_grpc::Body_ServiceId Body::service_id() const {
  // @@protoc_insertion_point(field_get:gdt_grpc.Body.service_id)
  return _internal_service_id();
}
inline void Body::_internal_set_service_id(::gdt_grpc::Body_ServiceId value) {
  
  service_id_ = value;
}
inline void Body::set_service_id(::gdt_grpc::Body_ServiceId value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:gdt_grpc.Body.service_id)
}

// repeated .gdt_grpc.Body.Param params = 2;
inline int Body::_internal_params_size() const {
  return params_.size();
}
inline int Body::params_size() const {
  return _internal_params_size();
}
inline void Body::clear_params() {
  params_.Clear();
}
inline ::gdt_grpc::Body_Param* Body::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:gdt_grpc.Body.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gdt_grpc::Body_Param >*
Body::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:gdt_grpc.Body.params)
  return &params_;
}
inline const ::gdt_grpc::Body_Param& Body::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::gdt_grpc::Body_Param& Body::params(int index) const {
  // @@protoc_insertion_point(field_get:gdt_grpc.Body.params)
  return _internal_params(index);
}
inline ::gdt_grpc::Body_Param* Body::_internal_add_params() {
  return params_.Add();
}
inline ::gdt_grpc::Body_Param* Body::add_params() {
  // @@protoc_insertion_point(field_add:gdt_grpc.Body.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gdt_grpc::Body_Param >&
Body::params() const {
  // @@protoc_insertion_point(field_list:gdt_grpc.Body.params)
  return params_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gdt_grpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gdt_grpc::Body_ServiceId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gdt_grpc::Body_ServiceId>() {
  return ::gdt_grpc::Body_ServiceId_descriptor();
}
template <> struct is_proto_enum< ::gdt_grpc::SysagentCommand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gdt_grpc::SysagentCommand>() {
  return ::gdt_grpc::SysagentCommand_descriptor();
}
template <> struct is_proto_enum< ::gdt_grpc::ParameterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gdt_grpc::ParameterType>() {
  return ::gdt_grpc::ParameterType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gdt_2eproto
