/*            _       _
 *  _ __ ___ (_)_ __ | | __
 * | '_ ` _ \| | '_ \| |/ /
 * | | | | | | | | | |   <
 * |_| |_| |_|_|_| |_|_|\_\
 *
 * SPDX-License-Identifier: MIT
 *
 */

syntax = "proto3";
option java_multiple_files = true;
option java_package = "io.gdt";
option java_outer_classname = "GDTProto";
option objc_class_prefix = "GDT";
package gdt_grpc;


/***********************/
/*  sysagent service   */
/***********************/
service SysagentGrpcService {
    // get cpu stats
    rpc GetCpuStats (CommonRequest) returns (CommonReply) {}
    // get sysinfo
    rpc GetSysinfo (CommonRequest) returns (CommonReply) {}
    // generic get data
    rpc GetData (CommonRequest) returns (CommonReply) {}
}

/********************/
/* Sysagent command */
/********************/
enum SysagentCommand {
    UNKNWON_COMMAND = 0;
    CMD_GET_SYSINFO = 1;
    CMD_GET_CPUSTATS = 2;
    CMD_GET_MEMINFO = 3;
    CMD_GET_UNAME = 4;
    CMD_GET_PROCESS_LST = 5;
    CMD_GET_FILE_STAT = 6;
    CMD_UBUS_CALL = 7;
    CMD_SHELL_EXEC = 8;
    CMD_SET_DATA = 9;
    CMD_RUN_RULES = 10;
    CMD_LOAD_RULES = 11;
    CMD_AUTH = 12;
    CMD_SOCKET_PROXY = 13;
    CMD_FIRMWARE_UPDATE = 14;
    CMD_SYSLOG_START = 15;
    CMD_SYSLOG_STOP = 16;
    CMD_REMOTE_EXEC_START = 17;
    CMD_REMOTE_EXEC_STOP = 18;
    CMD_GET_SYSMON_DATA = 19;
    CMD_NET_TCP_SEND = 20;
    CMD_CG2_GROUP_CREATE = 21;
    CMD_CG2_GROUP_DELETE = 22;
    CMD_CG2_GROUPS_LST = 23;
    CMD_CG2_CONTROLLER_GET = 24;
    CMD_CG2_CONTROLLER_SET = 25;
    CMD_CG2_CONTROLLERS_LST = 26;
    CMD_SYSD_FWLD_GET_ZONES = 27;
}

/******************/
/* Parameter type */
/******************/
enum ParameterType {
    UNKNWON_PARAMETER = 0;
    // mink core
    PT_MINK_DTYPE = 6000;
    PT_MINK_DID = 6001;
    PT_MINK_ERROR = 6016;
    PT_MINK_ERROR_MSG = 6017;
    PT_MINK_STATUS = 6018;
    PT_MINK_STATUS_MSG = 6019;
    PT_MINK_PERSISTENT_CORRELATION = 6020;
    // cpu info
    PT_CPU_USER_PERCENT = 9000;
    PT_CPU_NICE_PERCENT = 9001;
    PT_CPU_SYSTEM_PERCENT = 9002;
    // sysinfo
    PT_SI_LOAD_AVG_1_MIN = 9003;
    PT_SI_LOAD_AVG_5_MIN = 9004;
    PT_SI_LOAD_AVG_15_MIN = 9005;
    PT_SI_MEM_TOTAL = 9006;
    PT_SI_MEM_FREE = 9007;
    PT_SI_MEM_BUFFERS = 9008;
    PT_SI_MEM_SWAP_TOTAL = 9009;
    PT_SI_MEM_SWAP_FREE = 9010;
    PT_SI_MEM_HIGH_TOTAL = 9011;
    PT_SI_MEM_HIGH_FREE = 9012;
    PT_SI_MEM_UNIT_SIZE = 9013;
    // meminfo
    PT_MI_TOTAL = 9014;
    PT_MI_FREE = 9015;
    PT_MI_BUFFERS = 9016;
    PT_MI_CACHED = 9017;
    // uname
    PT_UNM_SYSNAME = 9018;
    PT_UNM_NODENAME = 9019;
    PT_UNM_RELEASE = 9020;
    PT_UNM_VERSION = 9021;
    PT_UNM_MACHINE = 9022;
    // process list
    PT_PL_CMD = 9023;
    PT_PL_TID = 9024;
    PT_PL_PPID = 9025;
    PT_PL_RESIDENT = 9026;
    PT_PL_UTIME = 9027;
    PT_PL_STIME = 9028;
    // openwrt
    PT_OWRT_UBUS_PATH = 9029;
    PT_OWRT_UBUS_METHOD = 9030;
    PT_OWRT_UBUS_ARG = 9031;
    PT_OWRT_UBUS_RESULT = 9032;
    // shell
    PT_SHELL_CMD = 9033;
    PT_SHELL_STDOUT = 9034;
    PT_SHELL_STDERR = 9035;
    PT_SHELL_EXIT_CODE = 9036;
    // socket proxy
    PT_SP_TYPE = 9037;
    PT_SP_PATH = 9038;
    PT_SP_PAYLOAD = 9039;
    // firmware update
    PT_FU_DATA = 9040;
    PT_FU_FSIZE = 9041;
    // syslog
    PT_SL_LOGLINE = 9042;
    PT_SL_PORT = 9043;
    // remote exec
    PT_RE_PORT = 9044;
    // net
    PT_NET_IP = 9045;
    PT_NET_PORT = 9046;
    // cgroup2
    PT_CG2_GRP_CFG = 9047;
    // systemd
    PT_SYSD_SERVICE = 9048;
    PT_SYSD_PATH = 9049;
    PT_SYSD_INTERFACE = 9050;
    PT_SYSD_METHOD = 9051;
    PT_SYSD_SIGNATURE = 9052;
    PT_SYSD_RESULT_SIGNATURE = 9053;
    PT_SYSD_ARGS = 9054;
    PT_SYSD_RESULT = 9055;
    PT_SYSD_DUMP = 9056;
    PT_SYSD_FWLD_ZONE = 9057;
}

/*****************/
/* CommonRequest */
/*****************/
message CommonRequest {
    Header header = 1;
    Body body = 2;
}

/***************/
/* CommonReply */
/***************/
message CommonReply {
    Header header = 1;
    Body body = 2;
}

/************************/
/* End point descriptor */
/************************/
message EndPointDescriptor {
    string type = 1;
    string id = 2;
}

/**********/
/* Header */
/**********/
message Header {
    EndPointDescriptor source = 1;
    EndPointDescriptor destination = 2;
}

/********/
/* Body */
/********/
message Body {
    // service id types
    enum ServiceId {
        UNKNOWN_SERVICE_ID = 0;
        SYSAGENT = 47;
    }
     // param message
    message Param {
        int32 id = 1;
        int32 index = 2;
        string value = 3;
    }
    ServiceId service_id = 1;
    repeated Param params = 2;
}
