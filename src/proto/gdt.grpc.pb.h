// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gdt.proto
// Original file comments:
//            _       _
//  _ __ ___ (_)_ __ | | __
// | '_ ` _ \| | '_ \| |/ /
// | | | | | | | | | |   <
// |_| |_| |_|_|_| |_|_|\_\
//
// SPDX-License-Identifier: MIT
//
//
#ifndef GRPC_gdt_2eproto__INCLUDED
#define GRPC_gdt_2eproto__INCLUDED

#include "gdt.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace gdt_grpc {

// *********************
//
//  sysagent service   
//
// *********************
class SysagentGrpcService final {
 public:
  static constexpr char const* service_full_name() {
    return "gdt_grpc.SysagentGrpcService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // get cpu stats
    virtual ::grpc::Status GetCpuStats(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::gdt_grpc::CommonReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>> AsyncGetCpuStats(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>>(AsyncGetCpuStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>> PrepareAsyncGetCpuStats(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>>(PrepareAsyncGetCpuStatsRaw(context, request, cq));
    }
    // get sysinfo
    virtual ::grpc::Status GetSysinfo(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::gdt_grpc::CommonReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>> AsyncGetSysinfo(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>>(AsyncGetSysinfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>> PrepareAsyncGetSysinfo(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>>(PrepareAsyncGetSysinfoRaw(context, request, cq));
    }
    // generic get data
    virtual ::grpc::Status GetData(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::gdt_grpc::CommonReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>> AsyncGetData(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>>(AsyncGetDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>> PrepareAsyncGetData(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>>(PrepareAsyncGetDataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // get cpu stats
      virtual void GetCpuStats(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCpuStats(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get sysinfo
      virtual void GetSysinfo(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSysinfo(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // generic get data
      virtual void GetData(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetData(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>* AsyncGetCpuStatsRaw(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>* PrepareAsyncGetCpuStatsRaw(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>* AsyncGetSysinfoRaw(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>* PrepareAsyncGetSysinfoRaw(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gdt_grpc::CommonReply>* PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetCpuStats(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::gdt_grpc::CommonReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>> AsyncGetCpuStats(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>>(AsyncGetCpuStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>> PrepareAsyncGetCpuStats(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>>(PrepareAsyncGetCpuStatsRaw(context, request, cq));
    }
    ::grpc::Status GetSysinfo(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::gdt_grpc::CommonReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>> AsyncGetSysinfo(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>>(AsyncGetSysinfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>> PrepareAsyncGetSysinfo(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>>(PrepareAsyncGetSysinfoRaw(context, request, cq));
    }
    ::grpc::Status GetData(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::gdt_grpc::CommonReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>> AsyncGetData(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>>(AsyncGetDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>> PrepareAsyncGetData(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>>(PrepareAsyncGetDataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetCpuStats(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response, std::function<void(::grpc::Status)>) override;
      void GetCpuStats(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSysinfo(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response, std::function<void(::grpc::Status)>) override;
      void GetSysinfo(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetData(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response, std::function<void(::grpc::Status)>) override;
      void GetData(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>* AsyncGetCpuStatsRaw(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>* PrepareAsyncGetCpuStatsRaw(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>* AsyncGetSysinfoRaw(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>* PrepareAsyncGetSysinfoRaw(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gdt_grpc::CommonReply>* PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::gdt_grpc::CommonRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCpuStats_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSysinfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // get cpu stats
    virtual ::grpc::Status GetCpuStats(::grpc::ServerContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response);
    // get sysinfo
    virtual ::grpc::Status GetSysinfo(::grpc::ServerContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response);
    // generic get data
    virtual ::grpc::Status GetData(::grpc::ServerContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCpuStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCpuStats() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCpuStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCpuStats(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCpuStats(::grpc::ServerContext* context, ::gdt_grpc::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::gdt_grpc::CommonReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSysinfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSysinfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSysinfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSysinfo(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSysinfo(::grpc::ServerContext* context, ::gdt_grpc::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::gdt_grpc::CommonReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetData(::grpc::ServerContext* context, ::gdt_grpc::CommonRequest* request, ::grpc::ServerAsyncResponseWriter< ::gdt_grpc::CommonReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCpuStats<WithAsyncMethod_GetSysinfo<WithAsyncMethod_GetData<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetCpuStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCpuStats() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response) { return this->GetCpuStats(context, request, response); }));}
    void SetMessageAllocatorFor_GetCpuStats(
        ::grpc::MessageAllocator< ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCpuStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCpuStats(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCpuStats(
      ::grpc::CallbackServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSysinfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSysinfo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response) { return this->GetSysinfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetSysinfo(
        ::grpc::MessageAllocator< ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSysinfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSysinfo(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSysinfo(
      ::grpc::CallbackServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetData() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gdt_grpc::CommonRequest* request, ::gdt_grpc::CommonReply* response) { return this->GetData(context, request, response); }));}
    void SetMessageAllocatorFor_GetData(
        ::grpc::MessageAllocator< ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetData(
      ::grpc::CallbackServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetCpuStats<WithCallbackMethod_GetSysinfo<WithCallbackMethod_GetData<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCpuStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCpuStats() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCpuStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCpuStats(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSysinfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSysinfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSysinfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSysinfo(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCpuStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCpuStats() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCpuStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCpuStats(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCpuStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSysinfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSysinfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSysinfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSysinfo(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSysinfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCpuStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCpuStats() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCpuStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCpuStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCpuStats(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCpuStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSysinfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSysinfo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSysinfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSysinfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSysinfo(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSysinfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetData() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetData(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCpuStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCpuStats() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>* streamer) {
                       return this->StreamedGetCpuStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCpuStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCpuStats(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCpuStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gdt_grpc::CommonRequest,::gdt_grpc::CommonReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSysinfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSysinfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>* streamer) {
                       return this->StreamedGetSysinfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSysinfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSysinfo(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSysinfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gdt_grpc::CommonRequest,::gdt_grpc::CommonReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gdt_grpc::CommonRequest, ::gdt_grpc::CommonReply>* streamer) {
                       return this->StreamedGetData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::gdt_grpc::CommonRequest* /*request*/, ::gdt_grpc::CommonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gdt_grpc::CommonRequest,::gdt_grpc::CommonReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCpuStats<WithStreamedUnaryMethod_GetSysinfo<WithStreamedUnaryMethod_GetData<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCpuStats<WithStreamedUnaryMethod_GetSysinfo<WithStreamedUnaryMethod_GetData<Service > > > StreamedService;
};

}  // namespace gdt_grpc


#endif  // GRPC_gdt_2eproto__INCLUDED
