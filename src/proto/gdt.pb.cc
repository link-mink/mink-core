// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdt.proto

#include "gdt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace gdt_grpc {
constexpr CommonRequest::CommonRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , body_(nullptr){}
struct CommonRequestDefaultTypeInternal {
  constexpr CommonRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonRequestDefaultTypeInternal() {}
  union {
    CommonRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonRequestDefaultTypeInternal _CommonRequest_default_instance_;
constexpr CommonReply::CommonReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , body_(nullptr){}
struct CommonReplyDefaultTypeInternal {
  constexpr CommonReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonReplyDefaultTypeInternal() {}
  union {
    CommonReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonReplyDefaultTypeInternal _CommonReply_default_instance_;
constexpr EndPointDescriptor::EndPointDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EndPointDescriptorDefaultTypeInternal {
  constexpr EndPointDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndPointDescriptorDefaultTypeInternal() {}
  union {
    EndPointDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndPointDescriptorDefaultTypeInternal _EndPointDescriptor_default_instance_;
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_(nullptr)
  , destination_(nullptr){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr Body_Param::Body_Param(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , index_(0){}
struct Body_ParamDefaultTypeInternal {
  constexpr Body_ParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Body_ParamDefaultTypeInternal() {}
  union {
    Body_Param _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Body_ParamDefaultTypeInternal _Body_Param_default_instance_;
constexpr Body::Body(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_()
  , service_id_(0)
{}
struct BodyDefaultTypeInternal {
  constexpr BodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BodyDefaultTypeInternal() {}
  union {
    Body _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BodyDefaultTypeInternal _Body_default_instance_;
}  // namespace gdt_grpc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gdt_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gdt_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gdt_2eproto = nullptr;

const uint32_t TableStruct_gdt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::CommonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::CommonRequest, header_),
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::CommonRequest, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::CommonReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::CommonReply, header_),
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::CommonReply, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::EndPointDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::EndPointDescriptor, type_),
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::EndPointDescriptor, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::Header, source_),
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::Header, destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::Body_Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::Body_Param, id_),
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::Body_Param, index_),
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::Body_Param, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::Body, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::Body, service_id_),
  PROTOBUF_FIELD_OFFSET(::gdt_grpc::Body, params_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::gdt_grpc::CommonRequest)},
  { 8, -1, -1, sizeof(::gdt_grpc::CommonReply)},
  { 16, -1, -1, sizeof(::gdt_grpc::EndPointDescriptor)},
  { 24, -1, -1, sizeof(::gdt_grpc::Header)},
  { 32, -1, -1, sizeof(::gdt_grpc::Body_Param)},
  { 41, -1, -1, sizeof(::gdt_grpc::Body)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gdt_grpc::_CommonRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gdt_grpc::_CommonReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gdt_grpc::_EndPointDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gdt_grpc::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gdt_grpc::_Body_Param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gdt_grpc::_Body_default_instance_),
};

const char descriptor_table_protodef_gdt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tgdt.proto\022\010gdt_grpc\"O\n\rCommonRequest\022 "
  "\n\006header\030\001 \001(\0132\020.gdt_grpc.Header\022\034\n\004body"
  "\030\002 \001(\0132\016.gdt_grpc.Body\"M\n\013CommonReply\022 \n"
  "\006header\030\001 \001(\0132\020.gdt_grpc.Header\022\034\n\004body\030"
  "\002 \001(\0132\016.gdt_grpc.Body\".\n\022EndPointDescrip"
  "tor\022\014\n\004type\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\"i\n\006Header\022"
  ",\n\006source\030\001 \001(\0132\034.gdt_grpc.EndPointDescr"
  "iptor\0221\n\013destination\030\002 \001(\0132\034.gdt_grpc.En"
  "dPointDescriptor\"\300\001\n\004Body\022,\n\nservice_id\030"
  "\001 \001(\0162\030.gdt_grpc.Body.ServiceId\022$\n\006param"
  "s\030\002 \003(\0132\024.gdt_grpc.Body.Param\0321\n\005Param\022\n"
  "\n\002id\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\022\r\n\005value\030\003 \001(\t"
  "\"1\n\tServiceId\022\026\n\022UNKNOWN_SERVICE_ID\020\000\022\014\n"
  "\010SYSAGENT\020/*\335\006\n\017SysagentCommand\022\023\n\017UNKNW"
  "ON_COMMAND\020\000\022\023\n\017CMD_GET_SYSINFO\020\001\022\024\n\020CMD"
  "_GET_CPUSTATS\020\002\022\023\n\017CMD_GET_MEMINFO\020\003\022\021\n\r"
  "CMD_GET_UNAME\020\004\022\027\n\023CMD_GET_PROCESS_LST\020\005"
  "\022\025\n\021CMD_GET_FILE_STAT\020\006\022\021\n\rCMD_UBUS_CALL"
  "\020\007\022\022\n\016CMD_SHELL_EXEC\020\010\022\020\n\014CMD_SET_DATA\020\t"
  "\022\021\n\rCMD_RUN_RULES\020\n\022\022\n\016CMD_LOAD_RULES\020\013\022"
  "\014\n\010CMD_AUTH\020\014\022\024\n\020CMD_SOCKET_PROXY\020\r\022\027\n\023C"
  "MD_FIRMWARE_UPDATE\020\016\022\024\n\020CMD_SYSLOG_START"
  "\020\017\022\023\n\017CMD_SYSLOG_STOP\020\020\022\031\n\025CMD_REMOTE_EX"
  "EC_START\020\021\022\030\n\024CMD_REMOTE_EXEC_STOP\020\022\022\027\n\023"
  "CMD_GET_SYSMON_DATA\020\023\022\024\n\020CMD_NET_TCP_SEN"
  "D\020\024\022\030\n\024CMD_CG2_GROUP_CREATE\020\025\022\030\n\024CMD_CG2"
  "_GROUP_DELETE\020\026\022\026\n\022CMD_CG2_GROUPS_LST\020\027\022"
  "\032\n\026CMD_CG2_CONTROLLER_GET\020\030\022\032\n\026CMD_CG2_C"
  "ONTROLLER_SET\020\031\022\033\n\027CMD_CG2_CONTROLLERS_L"
  "ST\020\032\022\033\n\027CMD_SYSD_FWLD_GET_ZONES\020\033\022 \n\034CMD"
  "_SYSD_FWLD_GET_RICH_RULES\020\034\022\037\n\033CMD_SYSD_"
  "FWLD_ADD_RICH_RULE\020\035\022\037\n\033CMD_SYSD_FWLD_DE"
  "L_RICH_RULE\020\036\022\030\n\024CMD_SYSD_FWLD_RELOAD\020\037\022"
  "\030\n\024CMD_MODBUS_WRITE_BIT\020 \022\030\n\024CMD_MODBUS_"
  "READ_BITS\020!\022\026\n\022CMD_NDPI_GET_STATS\020\"*\264\014\n\r"
  "ParameterType\022\025\n\021UNKNWON_PARAMETER\020\000\022\022\n\r"
  "PT_MINK_DTYPE\020\360.\022\020\n\013PT_MINK_DID\020\361.\022\022\n\rPT"
  "_MINK_ERROR\020\200/\022\026\n\021PT_MINK_ERROR_MSG\020\201/\022\023"
  "\n\016PT_MINK_STATUS\020\202/\022\027\n\022PT_MINK_STATUS_MS"
  "G\020\203/\022#\n\036PT_MINK_PERSISTENT_CORRELATION\020\204"
  "/\022\030\n\023PT_CPU_USER_PERCENT\020\250F\022\030\n\023PT_CPU_NI"
  "CE_PERCENT\020\251F\022\032\n\025PT_CPU_SYSTEM_PERCENT\020\252"
  "F\022\031\n\024PT_SI_LOAD_AVG_1_MIN\020\253F\022\031\n\024PT_SI_LO"
  "AD_AVG_5_MIN\020\254F\022\032\n\025PT_SI_LOAD_AVG_15_MIN"
  "\020\255F\022\024\n\017PT_SI_MEM_TOTAL\020\256F\022\023\n\016PT_SI_MEM_F"
  "REE\020\257F\022\026\n\021PT_SI_MEM_BUFFERS\020\260F\022\031\n\024PT_SI_"
  "MEM_SWAP_TOTAL\020\261F\022\030\n\023PT_SI_MEM_SWAP_FREE"
  "\020\262F\022\031\n\024PT_SI_MEM_HIGH_TOTAL\020\263F\022\030\n\023PT_SI_"
  "MEM_HIGH_FREE\020\264F\022\030\n\023PT_SI_MEM_UNIT_SIZE\020"
  "\265F\022\020\n\013PT_MI_TOTAL\020\266F\022\017\n\nPT_MI_FREE\020\267F\022\022\n"
  "\rPT_MI_BUFFERS\020\270F\022\021\n\014PT_MI_CACHED\020\271F\022\023\n\016"
  "PT_UNM_SYSNAME\020\272F\022\024\n\017PT_UNM_NODENAME\020\273F\022"
  "\023\n\016PT_UNM_RELEASE\020\274F\022\023\n\016PT_UNM_VERSION\020\275"
  "F\022\023\n\016PT_UNM_MACHINE\020\276F\022\016\n\tPT_PL_CMD\020\277F\022\016"
  "\n\tPT_PL_TID\020\300F\022\017\n\nPT_PL_PPID\020\301F\022\023\n\016PT_PL"
  "_RESIDENT\020\302F\022\020\n\013PT_PL_UTIME\020\303F\022\020\n\013PT_PL_"
  "STIME\020\304F\022\026\n\021PT_OWRT_UBUS_PATH\020\305F\022\030\n\023PT_O"
  "WRT_UBUS_METHOD\020\306F\022\025\n\020PT_OWRT_UBUS_ARG\020\307"
  "F\022\030\n\023PT_OWRT_UBUS_RESULT\020\310F\022\021\n\014PT_SHELL_"
  "CMD\020\311F\022\024\n\017PT_SHELL_STDOUT\020\312F\022\024\n\017PT_SHELL"
  "_STDERR\020\313F\022\027\n\022PT_SHELL_EXIT_CODE\020\314F\022\017\n\nP"
  "T_SP_TYPE\020\315F\022\017\n\nPT_SP_PATH\020\316F\022\022\n\rPT_SP_P"
  "AYLOAD\020\317F\022\017\n\nPT_FU_DATA\020\320F\022\020\n\013PT_FU_FSIZ"
  "E\020\321F\022\022\n\rPT_SL_LOGLINE\020\322F\022\017\n\nPT_SL_PORT\020\323"
  "F\022\017\n\nPT_RE_PORT\020\324F\022\016\n\tPT_NET_IP\020\325F\022\020\n\013PT"
  "_NET_PORT\020\326F\022\023\n\016PT_CG2_GRP_CFG\020\327F\022\024\n\017PT_"
  "SYSD_SERVICE\020\330F\022\021\n\014PT_SYSD_PATH\020\331F\022\026\n\021PT"
  "_SYSD_INTERFACE\020\332F\022\023\n\016PT_SYSD_METHOD\020\333F\022"
  "\026\n\021PT_SYSD_SIGNATURE\020\334F\022\035\n\030PT_SYSD_RESUL"
  "T_SIGNATURE\020\335F\022\021\n\014PT_SYSD_ARGS\020\336F\022\023\n\016PT_"
  "SYSD_RESULT\020\337F\022\021\n\014PT_SYSD_DUMP\020\340F\022\026\n\021PT_"
  "SYSD_FWLD_ZONE\020\341F\022\026\n\021PT_SYSD_FWLD_RULE\020\342"
  "F\022\031\n\024PT_MODBUS_CONNECTION\020\343F\022\023\n\016PT_MODBU"
  "S_ADDR\020\344F\022\023\n\016PT_MODBUS_BITS\020\345F\022\021\n\014PT_MOD"
  "BUS_NB\020\346F\022\017\n\nPT_NDPI_IF\020\347F2\323\001\n\023SysagentG"
  "rpcService\022\?\n\013GetCpuStats\022\027.gdt_grpc.Com"
  "monRequest\032\025.gdt_grpc.CommonReply\"\000\022>\n\nG"
  "etSysinfo\022\027.gdt_grpc.CommonRequest\032\025.gdt"
  "_grpc.CommonReply\"\000\022;\n\007GetData\022\027.gdt_grp"
  "c.CommonRequest\032\025.gdt_grpc.CommonReply\"\000"
  "B\032\n\006io.gdtB\010GDTProtoP\001\242\002\003GDTb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gdt_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gdt_2eproto = {
  false, false, 3236, descriptor_table_protodef_gdt_2eproto, "gdt.proto", 
  &descriptor_table_gdt_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_gdt_2eproto::offsets,
  file_level_metadata_gdt_2eproto, file_level_enum_descriptors_gdt_2eproto, file_level_service_descriptors_gdt_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gdt_2eproto_getter() {
  return &descriptor_table_gdt_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gdt_2eproto(&descriptor_table_gdt_2eproto);
namespace gdt_grpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Body_ServiceId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gdt_2eproto);
  return file_level_enum_descriptors_gdt_2eproto[0];
}
bool Body_ServiceId_IsValid(int value) {
  switch (value) {
    case 0:
    case 47:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Body_ServiceId Body::UNKNOWN_SERVICE_ID;
constexpr Body_ServiceId Body::SYSAGENT;
constexpr Body_ServiceId Body::ServiceId_MIN;
constexpr Body_ServiceId Body::ServiceId_MAX;
constexpr int Body::ServiceId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SysagentCommand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gdt_2eproto);
  return file_level_enum_descriptors_gdt_2eproto[1];
}
bool SysagentCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParameterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gdt_2eproto);
  return file_level_enum_descriptors_gdt_2eproto[2];
}
bool ParameterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 6000:
    case 6001:
    case 6016:
    case 6017:
    case 6018:
    case 6019:
    case 6020:
    case 9000:
    case 9001:
    case 9002:
    case 9003:
    case 9004:
    case 9005:
    case 9006:
    case 9007:
    case 9008:
    case 9009:
    case 9010:
    case 9011:
    case 9012:
    case 9013:
    case 9014:
    case 9015:
    case 9016:
    case 9017:
    case 9018:
    case 9019:
    case 9020:
    case 9021:
    case 9022:
    case 9023:
    case 9024:
    case 9025:
    case 9026:
    case 9027:
    case 9028:
    case 9029:
    case 9030:
    case 9031:
    case 9032:
    case 9033:
    case 9034:
    case 9035:
    case 9036:
    case 9037:
    case 9038:
    case 9039:
    case 9040:
    case 9041:
    case 9042:
    case 9043:
    case 9044:
    case 9045:
    case 9046:
    case 9047:
    case 9048:
    case 9049:
    case 9050:
    case 9051:
    case 9052:
    case 9053:
    case 9054:
    case 9055:
    case 9056:
    case 9057:
    case 9058:
    case 9059:
    case 9060:
    case 9061:
    case 9062:
    case 9063:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CommonRequest::_Internal {
 public:
  static const ::gdt_grpc::Header& header(const CommonRequest* msg);
  static const ::gdt_grpc::Body& body(const CommonRequest* msg);
};

const ::gdt_grpc::Header&
CommonRequest::_Internal::header(const CommonRequest* msg) {
  return *msg->header_;
}
const ::gdt_grpc::Body&
CommonRequest::_Internal::body(const CommonRequest* msg) {
  return *msg->body_;
}
CommonRequest::CommonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gdt_grpc.CommonRequest)
}
CommonRequest::CommonRequest(const CommonRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::gdt_grpc::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_body()) {
    body_ = new ::gdt_grpc::Body(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gdt_grpc.CommonRequest)
}

inline void CommonRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&body_) -
    reinterpret_cast<char*>(&header_)) + sizeof(body_));
}

CommonRequest::~CommonRequest() {
  // @@protoc_insertion_point(destructor:gdt_grpc.CommonRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommonRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete body_;
}

void CommonRequest::ArenaDtor(void* object) {
  CommonRequest* _this = reinterpret_cast< CommonRequest* >(object);
  (void)_this;
}
void CommonRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gdt_grpc.CommonRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gdt_grpc.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gdt_grpc.Body body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt_grpc.CommonRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gdt_grpc.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .gdt_grpc.Body body = 2;
  if (this->_internal_has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt_grpc.CommonRequest)
  return target;
}

size_t CommonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gdt_grpc.CommonRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gdt_grpc.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gdt_grpc.Body body = 2;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommonRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonRequest::GetClassData() const { return &_class_data_; }

void CommonRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommonRequest *>(to)->MergeFrom(
      static_cast<const CommonRequest &>(from));
}


void CommonRequest::MergeFrom(const CommonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gdt_grpc.CommonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::gdt_grpc::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_body()) {
    _internal_mutable_body()->::gdt_grpc::Body::MergeFrom(from._internal_body());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonRequest::CopyFrom(const CommonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gdt_grpc.CommonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonRequest::IsInitialized() const {
  return true;
}

void CommonRequest::InternalSwap(CommonRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonRequest, body_)
      + sizeof(CommonRequest::body_)
      - PROTOBUF_FIELD_OFFSET(CommonRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gdt_2eproto_getter, &descriptor_table_gdt_2eproto_once,
      file_level_metadata_gdt_2eproto[0]);
}

// ===================================================================

class CommonReply::_Internal {
 public:
  static const ::gdt_grpc::Header& header(const CommonReply* msg);
  static const ::gdt_grpc::Body& body(const CommonReply* msg);
};

const ::gdt_grpc::Header&
CommonReply::_Internal::header(const CommonReply* msg) {
  return *msg->header_;
}
const ::gdt_grpc::Body&
CommonReply::_Internal::body(const CommonReply* msg) {
  return *msg->body_;
}
CommonReply::CommonReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gdt_grpc.CommonReply)
}
CommonReply::CommonReply(const CommonReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::gdt_grpc::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_body()) {
    body_ = new ::gdt_grpc::Body(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gdt_grpc.CommonReply)
}

inline void CommonReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&body_) -
    reinterpret_cast<char*>(&header_)) + sizeof(body_));
}

CommonReply::~CommonReply() {
  // @@protoc_insertion_point(destructor:gdt_grpc.CommonReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommonReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete body_;
}

void CommonReply::ArenaDtor(void* object) {
  CommonReply* _this = reinterpret_cast< CommonReply* >(object);
  (void)_this;
}
void CommonReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonReply::Clear() {
// @@protoc_insertion_point(message_clear_start:gdt_grpc.CommonReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gdt_grpc.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gdt_grpc.Body body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt_grpc.CommonReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gdt_grpc.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .gdt_grpc.Body body = 2;
  if (this->_internal_has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt_grpc.CommonReply)
  return target;
}

size_t CommonReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gdt_grpc.CommonReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gdt_grpc.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gdt_grpc.Body body = 2;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommonReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonReply::GetClassData() const { return &_class_data_; }

void CommonReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommonReply *>(to)->MergeFrom(
      static_cast<const CommonReply &>(from));
}


void CommonReply::MergeFrom(const CommonReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gdt_grpc.CommonReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::gdt_grpc::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_body()) {
    _internal_mutable_body()->::gdt_grpc::Body::MergeFrom(from._internal_body());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonReply::CopyFrom(const CommonReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gdt_grpc.CommonReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonReply::IsInitialized() const {
  return true;
}

void CommonReply::InternalSwap(CommonReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonReply, body_)
      + sizeof(CommonReply::body_)
      - PROTOBUF_FIELD_OFFSET(CommonReply, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gdt_2eproto_getter, &descriptor_table_gdt_2eproto_once,
      file_level_metadata_gdt_2eproto[1]);
}

// ===================================================================

class EndPointDescriptor::_Internal {
 public:
};

EndPointDescriptor::EndPointDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gdt_grpc.EndPointDescriptor)
}
EndPointDescriptor::EndPointDescriptor(const EndPointDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gdt_grpc.EndPointDescriptor)
}

inline void EndPointDescriptor::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EndPointDescriptor::~EndPointDescriptor() {
  // @@protoc_insertion_point(destructor:gdt_grpc.EndPointDescriptor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EndPointDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EndPointDescriptor::ArenaDtor(void* object) {
  EndPointDescriptor* _this = reinterpret_cast< EndPointDescriptor* >(object);
  (void)_this;
}
void EndPointDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndPointDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndPointDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:gdt_grpc.EndPointDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndPointDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gdt_grpc.EndPointDescriptor.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gdt_grpc.EndPointDescriptor.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndPointDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt_grpc.EndPointDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gdt_grpc.EndPointDescriptor.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gdt_grpc.EndPointDescriptor.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt_grpc.EndPointDescriptor)
  return target;
}

size_t EndPointDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gdt_grpc.EndPointDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndPointDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EndPointDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndPointDescriptor::GetClassData() const { return &_class_data_; }

void EndPointDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EndPointDescriptor *>(to)->MergeFrom(
      static_cast<const EndPointDescriptor &>(from));
}


void EndPointDescriptor::MergeFrom(const EndPointDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gdt_grpc.EndPointDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndPointDescriptor::CopyFrom(const EndPointDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gdt_grpc.EndPointDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPointDescriptor::IsInitialized() const {
  return true;
}

void EndPointDescriptor::InternalSwap(EndPointDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EndPointDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gdt_2eproto_getter, &descriptor_table_gdt_2eproto_once,
      file_level_metadata_gdt_2eproto[2]);
}

// ===================================================================

class Header::_Internal {
 public:
  static const ::gdt_grpc::EndPointDescriptor& source(const Header* msg);
  static const ::gdt_grpc::EndPointDescriptor& destination(const Header* msg);
};

const ::gdt_grpc::EndPointDescriptor&
Header::_Internal::source(const Header* msg) {
  return *msg->source_;
}
const ::gdt_grpc::EndPointDescriptor&
Header::_Internal::destination(const Header* msg) {
  return *msg->destination_;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gdt_grpc.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    source_ = new ::gdt_grpc::EndPointDescriptor(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_destination()) {
    destination_ = new ::gdt_grpc::EndPointDescriptor(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gdt_grpc.Header)
}

inline void Header::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&destination_) -
    reinterpret_cast<char*>(&source_)) + sizeof(destination_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:gdt_grpc.Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete destination_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:gdt_grpc.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gdt_grpc.EndPointDescriptor source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gdt_grpc.EndPointDescriptor destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt_grpc.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gdt_grpc.EndPointDescriptor source = 1;
  if (this->_internal_has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source(this), target, stream);
  }

  // .gdt_grpc.EndPointDescriptor destination = 2;
  if (this->_internal_has_destination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::destination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt_grpc.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gdt_grpc.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gdt_grpc.EndPointDescriptor source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .gdt_grpc.EndPointDescriptor destination = 2;
  if (this->_internal_has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }

void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Header *>(to)->MergeFrom(
      static_cast<const Header &>(from));
}


void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gdt_grpc.Header)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source()) {
    _internal_mutable_source()->::gdt_grpc::EndPointDescriptor::MergeFrom(from._internal_source());
  }
  if (from._internal_has_destination()) {
    _internal_mutable_destination()->::gdt_grpc::EndPointDescriptor::MergeFrom(from._internal_destination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gdt_grpc.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, destination_)
      + sizeof(Header::destination_)
      - PROTOBUF_FIELD_OFFSET(Header, source_)>(
          reinterpret_cast<char*>(&source_),
          reinterpret_cast<char*>(&other->source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gdt_2eproto_getter, &descriptor_table_gdt_2eproto_once,
      file_level_metadata_gdt_2eproto[3]);
}

// ===================================================================

class Body_Param::_Internal {
 public:
};

Body_Param::Body_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gdt_grpc.Body.Param)
}
Body_Param::Body_Param(const Body_Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&id_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:gdt_grpc.Body.Param)
}

inline void Body_Param::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&id_)) + sizeof(index_));
}

Body_Param::~Body_Param() {
  // @@protoc_insertion_point(destructor:gdt_grpc.Body.Param)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Body_Param::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Body_Param::ArenaDtor(void* object) {
  Body_Param* _this = reinterpret_cast< Body_Param* >(object);
  (void)_this;
}
void Body_Param::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Body_Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Body_Param::Clear() {
// @@protoc_insertion_point(message_clear_start:gdt_grpc.Body.Param)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&id_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Body_Param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gdt_grpc.Body.Param.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Body_Param::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt_grpc.Body.Param)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gdt_grpc.Body.Param.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt_grpc.Body.Param)
  return target;
}

size_t Body_Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gdt_grpc.Body.Param)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Body_Param::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Body_Param::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Body_Param::GetClassData() const { return &_class_data_; }

void Body_Param::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Body_Param *>(to)->MergeFrom(
      static_cast<const Body_Param &>(from));
}


void Body_Param::MergeFrom(const Body_Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gdt_grpc.Body.Param)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Body_Param::CopyFrom(const Body_Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gdt_grpc.Body.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body_Param::IsInitialized() const {
  return true;
}

void Body_Param::InternalSwap(Body_Param* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Body_Param, index_)
      + sizeof(Body_Param::index_)
      - PROTOBUF_FIELD_OFFSET(Body_Param, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Body_Param::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gdt_2eproto_getter, &descriptor_table_gdt_2eproto_once,
      file_level_metadata_gdt_2eproto[4]);
}

// ===================================================================

class Body::_Internal {
 public:
};

Body::Body(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gdt_grpc.Body)
}
Body::Body(const Body& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_id_ = from.service_id_;
  // @@protoc_insertion_point(copy_constructor:gdt_grpc.Body)
}

inline void Body::SharedCtor() {
service_id_ = 0;
}

Body::~Body() {
  // @@protoc_insertion_point(destructor:gdt_grpc.Body)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Body::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Body::ArenaDtor(void* object) {
  Body* _this = reinterpret_cast< Body* >(object);
  (void)_this;
}
void Body::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Body::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Body::Clear() {
// @@protoc_insertion_point(message_clear_start:gdt_grpc.Body)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  service_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Body::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gdt_grpc.Body.ServiceId service_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_service_id(static_cast<::gdt_grpc::Body_ServiceId>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .gdt_grpc.Body.Param params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Body::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gdt_grpc.Body)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gdt_grpc.Body.ServiceId service_id = 1;
  if (this->_internal_service_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_service_id(), target);
  }

  // repeated .gdt_grpc.Body.Param params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gdt_grpc.Body)
  return target;
}

size_t Body::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gdt_grpc.Body)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gdt_grpc.Body.Param params = 2;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gdt_grpc.Body.ServiceId service_id = 1;
  if (this->_internal_service_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_service_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Body::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Body::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Body::GetClassData() const { return &_class_data_; }

void Body::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Body *>(to)->MergeFrom(
      static_cast<const Body &>(from));
}


void Body::MergeFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gdt_grpc.Body)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from._internal_service_id() != 0) {
    _internal_set_service_id(from._internal_service_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Body::CopyFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gdt_grpc.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {
  return true;
}

void Body::InternalSwap(Body* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  swap(service_id_, other->service_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Body::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gdt_2eproto_getter, &descriptor_table_gdt_2eproto_once,
      file_level_metadata_gdt_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gdt_grpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gdt_grpc::CommonRequest* Arena::CreateMaybeMessage< ::gdt_grpc::CommonRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gdt_grpc::CommonRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gdt_grpc::CommonReply* Arena::CreateMaybeMessage< ::gdt_grpc::CommonReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gdt_grpc::CommonReply >(arena);
}
template<> PROTOBUF_NOINLINE ::gdt_grpc::EndPointDescriptor* Arena::CreateMaybeMessage< ::gdt_grpc::EndPointDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gdt_grpc::EndPointDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::gdt_grpc::Header* Arena::CreateMaybeMessage< ::gdt_grpc::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gdt_grpc::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::gdt_grpc::Body_Param* Arena::CreateMaybeMessage< ::gdt_grpc::Body_Param >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gdt_grpc::Body_Param >(arena);
}
template<> PROTOBUF_NOINLINE ::gdt_grpc::Body* Arena::CreateMaybeMessage< ::gdt_grpc::Body >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gdt_grpc::Body >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
