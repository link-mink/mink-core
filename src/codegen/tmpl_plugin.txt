/*            _       _
 *  _ __ ___ (_)_ __ | | __
 * | '_ ` _ \| | '_ \| |/ /
 * | | | | | | | | | |   <
 * |_| |_| |_|_|_| |_|_|\_\
 *
 * SPDX-License-Identifier: MIT
 *
 */

#include <mink_plugin.h>
#include <gdt_utils.h>
#include <config.h>
#ifdef ENABLE_GRPC
#include <gdt.pb.h>
#else
#include <gdt.pb.enums_only.h>
#endif

/**********************************************/
/* list of command implemented by this plugin */
/**********************************************/
int COMMANDS[] = {
{% for cmd in cmds %}    gdt_grpc::CMD_{{ upper(cmd) }},
{% endfor %}
    // end of list marker
    -1
};

/****************/
/* init handler */
/****************/
extern "C" int init(mink_utils::PluginManager *pm, mink_utils::PluginDescriptor *pd){
    return 0;
}

/*********************/
/* terminate handler */
/*********************/
extern "C" int terminate(mink_utils::PluginManager *pm, mink_utils::PluginDescriptor *pd){
    return 0;
}

{% for cmd in cmds %}
// Implementation of "{{ cmd }}" command
static void impl_{{ lower(cmd) }}(gdt::ServiceMessage *smsg){
    
}
{% endfor %}

/*******************/
/* command handler */
/*******************/
extern "C" int run(mink_utils::PluginManager *pm, 
                   mink_utils::PluginDescriptor *pd, 
                   int cmd_id,
                   void *data){

    if(!data) return 1;
    gdt::ServiceMessage *smsg = static_cast<gdt::ServiceMessage*>(data);

    // check command id
    switch (cmd_id) {
{% for cmd in cmds %}        case gdt_grpc::CMD_{{ upper(cmd) }}:
            impl_{{ lower(cmd) }}(smsg);
            break;
{% endfor %}
        default:
            break;
    }
    return 0;
}


